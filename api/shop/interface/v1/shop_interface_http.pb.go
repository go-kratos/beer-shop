// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.22.5
// source: v1/shop_interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopInterfaceAddCartItem = "/shop.interface.v1.ShopInterface/AddCartItem"
const OperationShopInterfaceCreateAddress = "/shop.interface.v1.ShopInterface/CreateAddress"
const OperationShopInterfaceCreateCard = "/shop.interface.v1.ShopInterface/CreateCard"
const OperationShopInterfaceCreateOrder = "/shop.interface.v1.ShopInterface/CreateOrder"
const OperationShopInterfaceDeleteCard = "/shop.interface.v1.ShopInterface/DeleteCard"
const OperationShopInterfaceGetAddress = "/shop.interface.v1.ShopInterface/GetAddress"
const OperationShopInterfaceGetBeer = "/shop.interface.v1.ShopInterface/GetBeer"
const OperationShopInterfaceGetCard = "/shop.interface.v1.ShopInterface/GetCard"
const OperationShopInterfaceListAddress = "/shop.interface.v1.ShopInterface/ListAddress"
const OperationShopInterfaceListBeer = "/shop.interface.v1.ShopInterface/ListBeer"
const OperationShopInterfaceListCard = "/shop.interface.v1.ShopInterface/ListCard"
const OperationShopInterfaceListCartItem = "/shop.interface.v1.ShopInterface/ListCartItem"
const OperationShopInterfaceListOrder = "/shop.interface.v1.ShopInterface/ListOrder"
const OperationShopInterfaceLogin = "/shop.interface.v1.ShopInterface/Login"
const OperationShopInterfaceLogout = "/shop.interface.v1.ShopInterface/Logout"
const OperationShopInterfaceRegister = "/shop.interface.v1.ShopInterface/Register"

type ShopInterfaceHTTPServer interface {
	AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemReply, error)
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)
	CreateCard(context.Context, *CreateCardReq) (*CreateCardReply, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderReply, error)
	DeleteCard(context.Context, *DeleteCardReq) (*DeleteCardReply, error)
	GetAddress(context.Context, *GetAddressReq) (*GetAddressReply, error)
	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)
	GetCard(context.Context, *GetCardReq) (*GetCardReply, error)
	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)
	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)
	ListCard(context.Context, *ListCardReq) (*ListCardReply, error)
	ListCartItem(context.Context, *ListCartItemReq) (*ListCartItemReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func RegisterShopInterfaceHTTPServer(s *http.Server, srv ShopInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/register", _ShopInterface_Register0_HTTP_Handler(srv))
	r.POST("/v1/login", _ShopInterface_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _ShopInterface_Logout0_HTTP_Handler(srv))
	r.GET("/v1/user/addresses", _ShopInterface_ListAddress0_HTTP_Handler(srv))
	r.POST("/v1/user/addresses", _ShopInterface_CreateAddress0_HTTP_Handler(srv))
	r.GET("/v1/user/addresses/{id}", _ShopInterface_GetAddress0_HTTP_Handler(srv))
	r.GET("/v1/user/cards", _ShopInterface_ListCard0_HTTP_Handler(srv))
	r.POST("/v1/user/cards", _ShopInterface_CreateCard0_HTTP_Handler(srv))
	r.GET("/v1/user/cards/{id}", _ShopInterface_GetCard0_HTTP_Handler(srv))
	r.DELETE("/v1/user/cards/{id}", _ShopInterface_DeleteCard0_HTTP_Handler(srv))
	r.GET("/v1/catalog/beers", _ShopInterface_ListBeer0_HTTP_Handler(srv))
	r.GET("/v1/catalog/beers/{id}", _ShopInterface_GetBeer0_HTTP_Handler(srv))
	r.GET("/v1/cart", _ShopInterface_ListCartItem0_HTTP_Handler(srv))
	r.POST("/v1/cart", _ShopInterface_AddCartItem0_HTTP_Handler(srv))
	r.POST("/v1/orders", _ShopInterface_CreateOrder0_HTTP_Handler(srv))
	r.GET("/v1/orders", _ShopInterface_ListOrder0_HTTP_Handler(srv))
}

func _ShopInterface_Register0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_Login0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_Logout0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_ListAddress0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceListAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAddressReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_CreateAddress0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAddressReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceCreateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_GetAddress0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_ListCard0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCardReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceListCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCard(ctx, req.(*ListCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCardReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_CreateCard0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceCreateCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCard(ctx, req.(*CreateCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCardReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_GetCard0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCardReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceGetCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCard(ctx, req.(*GetCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCardReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_DeleteCard0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCardReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceDeleteCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCard(ctx, req.(*DeleteCardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCardReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_ListBeer0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBeerReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceListBeer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBeer(ctx, req.(*ListBeerReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBeerReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_GetBeer0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBeerReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceGetBeer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBeer(ctx, req.(*GetBeerReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBeerReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_ListCartItem0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCartItemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceListCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCartItem(ctx, req.(*ListCartItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCartItemReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_AddCartItem0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCartItemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceAddCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCartItem(ctx, req.(*AddCartItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddCartItemReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_CreateOrder0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_ListOrder0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopInterfaceListOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderReply)
		return ctx.Result(200, reply)
	}
}

type ShopInterfaceHTTPClient interface {
	AddCartItem(ctx context.Context, req *AddCartItemReq, opts ...http.CallOption) (rsp *AddCartItemReply, err error)
	CreateAddress(ctx context.Context, req *CreateAddressReq, opts ...http.CallOption) (rsp *CreateAddressReply, err error)
	CreateCard(ctx context.Context, req *CreateCardReq, opts ...http.CallOption) (rsp *CreateCardReply, err error)
	CreateOrder(ctx context.Context, req *CreateOrderReq, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	DeleteCard(ctx context.Context, req *DeleteCardReq, opts ...http.CallOption) (rsp *DeleteCardReply, err error)
	GetAddress(ctx context.Context, req *GetAddressReq, opts ...http.CallOption) (rsp *GetAddressReply, err error)
	GetBeer(ctx context.Context, req *GetBeerReq, opts ...http.CallOption) (rsp *GetBeerReply, err error)
	GetCard(ctx context.Context, req *GetCardReq, opts ...http.CallOption) (rsp *GetCardReply, err error)
	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http.CallOption) (rsp *ListAddressReply, err error)
	ListBeer(ctx context.Context, req *ListBeerReq, opts ...http.CallOption) (rsp *ListBeerReply, err error)
	ListCard(ctx context.Context, req *ListCardReq, opts ...http.CallOption) (rsp *ListCardReply, err error)
	ListCartItem(ctx context.Context, req *ListCartItemReq, opts ...http.CallOption) (rsp *ListCartItemReply, err error)
	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http.CallOption) (rsp *ListOrderReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type ShopInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewShopInterfaceHTTPClient(client *http.Client) ShopInterfaceHTTPClient {
	return &ShopInterfaceHTTPClientImpl{client}
}

func (c *ShopInterfaceHTTPClientImpl) AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...http.CallOption) (*AddCartItemReply, error) {
	var out AddCartItemReply
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceAddCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...http.CallOption) (*CreateAddressReply, error) {
	var out CreateAddressReply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceCreateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) CreateCard(ctx context.Context, in *CreateCardReq, opts ...http.CallOption) (*CreateCardReply, error) {
	var out CreateCardReply
	pattern := "/v1/user/cards"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceCreateCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) DeleteCard(ctx context.Context, in *DeleteCardReq, opts ...http.CallOption) (*DeleteCardReply, error) {
	var out DeleteCardReply
	pattern := "/v1/user/cards/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceDeleteCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressReq, opts ...http.CallOption) (*GetAddressReply, error) {
	var out GetAddressReply
	pattern := "/v1/user/addresses/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) GetBeer(ctx context.Context, in *GetBeerReq, opts ...http.CallOption) (*GetBeerReply, error) {
	var out GetBeerReply
	pattern := "/v1/catalog/beers/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceGetBeer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) GetCard(ctx context.Context, in *GetCardReq, opts ...http.CallOption) (*GetCardReply, error) {
	var out GetCardReply
	pattern := "/v1/user/cards/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceGetCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http.CallOption) (*ListAddressReply, error) {
	var out ListAddressReply
	pattern := "/v1/user/addresses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceListAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListBeer(ctx context.Context, in *ListBeerReq, opts ...http.CallOption) (*ListBeerReply, error) {
	var out ListBeerReply
	pattern := "/v1/catalog/beers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceListBeer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListCard(ctx context.Context, in *ListCardReq, opts ...http.CallOption) (*ListCardReply, error) {
	var out ListCardReply
	pattern := "/v1/user/cards"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceListCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListCartItem(ctx context.Context, in *ListCartItemReq, opts ...http.CallOption) (*ListCartItemReply, error) {
	var out ListCartItemReply
	pattern := "/v1/cart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceListCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopInterfaceListOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopInterfaceRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
