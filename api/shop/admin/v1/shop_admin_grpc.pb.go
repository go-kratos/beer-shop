// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopAdminClient is the client API for ShopAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopAdminClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error)
	CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error)
	UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error)
	ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error)
	GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error)
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
}

type shopAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewShopAdminClient(cc grpc.ClientConnInterface) ShopAdminClient {
	return &shopAdminClient{cc}
}

func (c *shopAdminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error) {
	out := new(ListBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error) {
	out := new(CreateBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error) {
	out := new(UpdateBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error) {
	out := new(DeleteBeerReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error) {
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopAdminServer is the server API for ShopAdmin service.
// All implementations must embed UnimplementedShopAdminServer
// for forward compatibility
type ShopAdminServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)
	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	mustEmbedUnimplementedShopAdminServer()
}

// UnimplementedShopAdminServer must be embedded to have forward compatible implementations.
type UnimplementedShopAdminServer struct {
}

func (UnimplementedShopAdminServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedShopAdminServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedShopAdminServer) ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeer not implemented")
}
func (UnimplementedShopAdminServer) CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedShopAdminServer) UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedShopAdminServer) DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedShopAdminServer) ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedShopAdminServer) GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedShopAdminServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedShopAdminServer) GetUser(context.Context, *GetUserReq) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedShopAdminServer) mustEmbedUnimplementedShopAdminServer() {}

// UnsafeShopAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopAdminServer will
// result in compilation errors.
type UnsafeShopAdminServer interface {
	mustEmbedUnimplementedShopAdminServer()
}

func RegisterShopAdminServer(s grpc.ServiceRegistrar, srv ShopAdminServer) {
	s.RegisterService(&ShopAdmin_ServiceDesc, srv)
}

func _ShopAdmin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListBeer(ctx, req.(*ListBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).CreateBeer(ctx, req.(*CreateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).UpdateBeer(ctx, req.(*UpdateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).DeleteBeer(ctx, req.(*DeleteBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListOrder(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).GetOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopAdmin_ServiceDesc is the grpc.ServiceDesc for ShopAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.admin.v1.ShopAdmin",
	HandlerType: (*ShopAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ShopAdmin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ShopAdmin_Logout_Handler,
		},
		{
			MethodName: "ListBeer",
			Handler:    _ShopAdmin_ListBeer_Handler,
		},
		{
			MethodName: "CreateBeer",
			Handler:    _ShopAdmin_CreateBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _ShopAdmin_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _ShopAdmin_DeleteBeer_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _ShopAdmin_ListOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ShopAdmin_GetOrder_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _ShopAdmin_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ShopAdmin_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shop_admin.proto",
}
